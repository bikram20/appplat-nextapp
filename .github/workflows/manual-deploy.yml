name: Manage DigitalOcean App
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - delete
          - fetch-ingress
      environment:
        description: 'Environment to use'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  manage-app:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      DO_APP_ID: ${{ vars.DO_APP_ID }}
    steps:
      - uses: actions/checkout@v4
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Manage DigitalOcean App
        run: |
          APP_SPEC=".do/app.yaml"
          MAX_RETRIES=30
          RETRY_INTERVAL=20

          deploy_app() {
            if [[ -z "$DO_APP_ID" ]]; then
              echo "Creating new app..."
              NEW_APP_ID=$(doctl apps create --spec $APP_SPEC --format ID --no-header)
              echo "DO_APP_ID=$NEW_APP_ID" >> $GITHUB_ENV
              echo "New app created with ID: $NEW_APP_ID"
            else
              echo "Updating existing app..."
              doctl apps update $DO_APP_ID --spec $APP_SPEC
            fi
          }

          delete_app() {
            if [[ -n "$DO_APP_ID" ]]; then
              echo "Deleting app with ID: $DO_APP_ID"
              doctl apps delete $DO_APP_ID --force
              echo "App deleted successfully"
              echo "DO_APP_ID=" >> $GITHUB_ENV
            else
              echo "No app ID provided. Nothing to delete."
            fi
          }

          fetch_ingress() {
            for ((i=1; i<=MAX_RETRIES; i++)); do
              APP_URL=$(doctl apps get $DO_APP_ID --format DefaultIngress --no-header)
              if [[ -n "$APP_URL" && "$APP_URL" != "null" ]]; then
                echo "App is live at: $APP_URL"
                break
              else
                echo "Attempt $i: Ingress not available yet. Retrying in $RETRY_INTERVAL seconds..."
                sleep $RETRY_INTERVAL
              fi
            done

            if [[ -z "$APP_URL" || "$APP_URL" == "null" ]]; then
              echo "Failed to fetch ingress after $MAX_RETRIES attempts."
              exit 1
            fi
          }

          case "${{ github.event.inputs.action }}" in
            deploy)
              deploy_app
              fetch_ingress
              ;;
            delete)
              delete_app
              ;;
            fetch-ingress)
              fetch_ingress
              ;;
            *)
              echo "Invalid action specified"
              exit 1
              ;;
          esac